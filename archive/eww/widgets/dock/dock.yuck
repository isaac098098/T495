; Modules

; Widgets

(deflisten workspaces :initial "[]" "~/.config/eww/scripts/get_workspaces.sh")
(deflisten current_workspace :initial "1" "~/.config/eww/scripts/get_active_workspace.sh")

(defwidget workspaces []
(eventbox
    :onscroll "~/.config/eww/scripts/change_active_workspace.sh {} ${current_workspace}"
    (box 
        :class "workspaces"
        :space-evenly true 
        :orientation "vertical"
        (label
            :text "${current_workspace}" :visible false)
            (for workspace in workspaces
                (eventbox
                    :onclick "hyprctl dispatch workspace ${workspace.id}"
                    (box
                        :class "workspace_entry_${workspace.windows > 0 ? "occupied" : "empty"}"
                        :halign "center"
                        (label
                            :text "${workspace.id == 10 ? "0" : workspace.id}" :class "workspace_entry_${workspace.id == current_workspace ? "current" : "other"}")
                    )
                )
            )
        )
    )
)

(deflisten wifi_status "~/.config/eww/scripts/wifi_status.sh")

(defwidget wifi []
	(box 
		:orientation "horizontal"
        :halign "center"
		:space-evenly "false"
        (tooltip 
            (label
                :class "wifi_tooltip"
                :text "${wifi_status.status == "connected" ? "${wifi_status.ssid} ${wifi_status.ip}" : "disconnected" }"
            )
            (button
                :class {wifi_status.status == "connected" ? "wifi_on" : "wifi_off"}
                :orientation "vertical"
                :space-evenly "false"
                :onclick "if [ \"${wifi_status.status}\" = 'connected' ]; then nmcli radio wifi off; elif [ \"${wifi_status.status}\" = 'disconnected' ]; then nmcli radio wifi on; fi"
                {wifi_status.status == "connected" ? "󰤨 " : "󰤭 "}
            )
        )
	)
)

(deflisten volume "~/.config/eww/scripts/get_vol.sh")

(defwidget volume []
    (box
        :orientation "vertical"
        :halign "center"
        :class "volume"
        (label
            :halign "center"
            :class "${volume.mute == "yes" ? "volume_icon_muted" : "volume_icon"}"
            :text "${(volume.mute == "yes" ? "󰝟 " : (volume.vol == 0 ? "󰝟 " : "󰕾 "))}"
        )
        (box
            :orientation "vertical"
            :halign "center"
            :space-evenly false
            (label
                :text "${volume.mute == "yes" ? "MUT" : volume.vol}"
            )
        )
    )
)

(defwidget mem []
    (box
        :class "memory"
		:space-evenly "false"
		:halign "center"
        :orientation "vertical"
        (box
            :class "ram_box"
            :space-evenly "false"
            :halign "center"
            (tooltip
                (label
                    :class "ram_tooltip"
                    :text "RAM ${round(EWW_RAM.used_mem / 1073741824, 1)}GiB / ${round(EWW_RAM.total_mem / 1073741824, 1)}GiB"
                )
                (circular-progress
                    :class "ram_usage"
                    :value {EWW_RAM.used_mem_perc}
                    :start-at 75
                    :thickness 6
                    :clockwise true
                    :active true
                    (button
                        :class "ram_perc"
                        :halign "start"
                        :onclick " "
                        " "
                    )
                )
            )
        )
        (box :class "filesystem_box"
            :orientation "vertical"
            :space-evenly "false"
            :halign "center"
            (tooltip
                (label
                    :class "filesys_tooltip"
                    :text "DISK ${round(EWW_DISK["/"].used / 1073741824, 1)}GiB / ${round(EWW_DISK["/"].total / 1073741824, 1)}GiB"
                )
                (circular-progress
                    :class "filesystem_usage"
                    :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
                    :start-at 75
                    :thickness 5
                    :clockwise true
                    :active true
                    (button
                        :class "filesystem_perc"
                        " "
                    )
                )
            )
        )
    )
)

; Date

(defpoll hour :interval "1m" "date '+%H'")
(defpoll min :interval "1m" "date '+%M'")
(defpoll date :interval "1m" "date +'%A %d, %B %Y'")

(defwidget time []
    (box
        :class "time"
        :space-evenly false
        :orientation "vertical"
		:halign "center"
        (tooltip
            (label
                :class "time_tooltip"
                :text "${date}"
            )
            (box
                :orientation "vertical"
                hour 
                min
            )
        )
	)
)

(deflisten ear_status "~/.config/eww/scripts/aud.sh")

(defwidget earphones_bat []
    (box
        :class "earphones"
        :space-evenly false
        :orientation "vertical"
		:halign "center"
        (revealer
            :transition "slideup"
            :reveal "${ear_status.status == "disconnected" ? false : true}"
            (tooltip
                (label
                    :class "ear_tooltip"
                    :text "${ear_status.device}: ${ear_status.percentage}%"
                )
                (scale
                    :orientation "vertical"
                    :flipped true
                    :active false
                    :value {ear_status.percentage}
                    :min 0
                    :max 101
                )
            )
        )
	)
)

; Battery

(deflisten bat "~/.config/eww/scripts/battery.sh")

(defwidget battery []
    (box
        :space-evenly false
        :orientation "vertical"
		:halign "center"
        :class "${bat.state == "charging" ? "bat_good" : (bat.percentage > 30 ? "bat_good" : (bat.percentage > 20 ? "bat_warning" : "bat_bad"))}"
        (tooltip
            (label
                :class "bat_tooltip"
                :text "${bat.state == "fully-charged" ? "FULL" : (bat.state == "charging" ? "BAT0: ${bat.percentage}% time to full: ${bat.timefull}" : (bat.state == "discharging" ? "BAT0: ${bat.percentage}% time to empty: ${bat.timeempty}" : ""))}"
            )
            (scale
                :orientation "vertical"
                :flipped true
                :active false
                :value {bat.percentage}
                :min 0
                :max 101
            )
        )
	)
)

(defwidget arch_menu []
	(box
        :class "arch_menu"
		:orientation "horizontal"
		:halign "center"
		:space-evenly "false"
		"󰣇 "
	)
)

; Window modules

(defwidget dock_widget []
	(box
		:class "dock_widget"
		:orientation "vertical"
		(left_dock)
		(right_dock)
	)
)

(defwidget left_dock []
	(box
		:class "left_dock"
		:orientation "vertical"
		:valign "start"
		:halign "center"
		:space-evenly "false"
		:spacing "0"
		(arch_menu)
        (workspaces)
	)
)

(defwidget right_dock []
	(box
		:class "right_dock"
		:orientation "vertical"
		:valign "end"
		:halign "center"
		:space-evenly "false"
		:spacing "0"
		(earphones_bat)
		(battery)
		(mem)
		(wifi)
		(volume)
		(time)
	)
)

; Windows

(defwindow dock
    :class "dock"
	:monitor 0
	:stacking "fg"
	:windowtype "dock"
    :exclusive "true"
	:geometry (
		geometry 
		:anchor "center left"
		:x "0px"
		:y "0px"
		:width "0px"
		:height "100%"
	)
    :reserve (
        struts 
        :distance "10px" 
        :side "left"
    )
	(dock_widget)
)
